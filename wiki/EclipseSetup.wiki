#summary Setting up the Eclipse workspace

= Prerequisites =

A local installation of !WebSphere 7.0.

= Add the WAS 7.0 JDK =

  # In the Eclipse preferences, select _Java_ > _Installed JREs_.
  # Click _Add_.
  # Select _Standard VM_ and click _Next_.
  # Set the _JRE home_ to the location of the WAS 7.0 JDK. This is the `java` folder under the !WebSphere installation directory (e.g. `/opt/IBM/WebSphere/AppServer/java`).
  # Set the _JRE name_ to `WAS 7.0` and click _Finish_.

= Creating a target platform definition for WAS =

  # In the Eclipse preferences, select _Plug-in Development_ > _Target Platform_.
  # Click _Add_.
  # Select _Nothing: Start with an empty target definition_ and click _Next_.
  # Enter the name for the target platform: _WAS 7.0_.
  # In the _Locations_ tab, click _Add_.
  # Select _Directory_ and click _Next_.
  # Set the _Location_ to the `plugins` directory of the WAS installation and click _Finish_.
  # In the _Content_ tab, deselect any previously installed version of the XM4WAS plugins (if applicable).
  # Click _Finish_.
  # Select the _WAS 7.0_ definition to make it the active target platform for the workspace.

= Deploying the plugins directly to !WebSphere =

The plugins can be deployed directly into !WebSphere by exporting them as _Deployable plug-ins and fragments_. The _Destination_ must be set to the WAS installation directory; Eclipse will automatically deploy the plugins to the `plugins` sub-directory.

When redeploying, execute the `osgiCfgInit` (see [http://publib.boulder.ibm.com/infocenter/wasinfo/v7r0/topic/com.ibm.websphere.base.doc/info/aes/ae/rxml_osgicfginit_script.html here]) script in the WAS profile used for testing before starting the server. Otherwise not all changes will be taken into account.
#summary Building using Maven

= Prerequisites =

  * Local installations of !WebSphere 6.1, 7.0 and 8.5 (8.5.0.x or 8.5.5.x). You can use [http://www.myeclipseide.com/module-htmlpages-display-pid-448.html WebSphere for Developers] versions.
  * Subversion.
  * Maven 3.

= Create a P2 repository from the !WebSphere runtime bundles =

The XM4WAS Maven (Tycho) build is set up to pull !WebSphere dependencies from a P2 repository. Since no public repository exists, it is necessary to create one locally and populate it with the bundles from the !WebSphere versions that are supported by XM4WAS, i.e. 6.1, 7.0 and 8.5. An additional problem is that different WAS versions can contain OSGi bundles with the same symbolic name and version, but that are not identical. To fix this problem, it is necessary to modify the bundle versions to include the WAS version.

XM4WAS provides a tool to perform these actions in a single run. The source code can be found at the following location:

https://xm4was.googlecode.com/svn/buildutils/plugin-importer

After checking out the source code from the Subversion repository, build the tool using the following command:

`mvn clean package`

This produces an executable JAR file. The tool expects as arguments the installation directories of the 3 !WebSphere versions followed by the URL of the P2 repository to create. The command should look as follows:

`java -jar target/plugin-importer-1-SNAPSHOT.jar /opt/IBM/WebSphere/AppServer-6.1/ /opt/IBM/WebSphere/AppServer-7.0/ /opt/IBM/WebSphere/AppServer-8.5/ file:///path/to/was_repo`

The tool will also download a couple of JARs from an Eclipse P2 repository. If you are behind an HTTP proxy, you may therefore need to set the `http.proxyHost` and `http.proxyPort` system properties accordingly.

= Set `JAVA_HOME` =

The project must be built using the JDK that comes with WAS 7.0. Set the `JAVA_HOME` accordingly (e.g. `/opt/IBM/WebSphere/AppServer/java`).
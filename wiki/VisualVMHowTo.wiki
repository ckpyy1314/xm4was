#summary How to configure VisualVM to connect to WebSphere

= Prerequisites =

  * An installation of [http://visualvm.java.net/ VisualVM].
  * An installation of !WebSphere Application Server. Since only a couple of libraries are required, there is no need to install WAS locally. The required libraries can be copied from another system.

The procedure described in this document has been tested with the following product versions:
  * VisualVM 1.3.2, 1.3.3 and 1.3.4 (older versions should work as well).
  * Libraries from !WebSphere 7.0, 8.0 and 8.5.
  * Connections to !WebSphere 6.1, 7.0, 8.0 and 8.5.

= Adding the XM4WAS JMX client connector JARs (Required) =

Add the following JARs to the `platform/lib` folder in the VisualVM installation directory:
  * `jmx-client-connector-<version>.jar` from the XM4WAS distribution.
  * The following JARs from a WAS 7.0, 8.0 or 8.5 installation:
    * `runtimes/com.ibm.ws.admin.client_*.jar`
    * `runtimes/com.ibm.ws.ejb.thinclient_*.jar`
    * `runtimes/com.ibm.ws.orb_*.jar`
    * `java/jre/lib/ibmpkcs.jar`
    * `java/jre/lib/ext/ibmkeycert.jar`
    * `java/jre/lib/ext/ibmjceprovider.jar`
Note that it is *not* required that the version of the !WebSphere libraries matches the version of the server to connect to. However, it is strongly recommended to use the libraries from a recent fix pack level of any of the supported WAS releases.

If you are planning to use the VisualVM-MBeans plugin and you are using the libraries from WAS 8.0 or 8.5, then you should also add the following JAR to `platform/lib`:
  * `plugins/javax.j2ee.management.jar`
This JAR contains the classes from the `javax.management.j2ee` package and is necessary to display the attribute values of certain !WebSphere MBeans. In WAS 7.0 these classes are already included in the admin client JAR.

= Setting system properties (Required) =

Open the `etc/visualvm.conf` file and add the following option to the `default_options` property:

{{{
-J-Djmx.remote.protocol.provider.pkgs=com.googlecode.xm4was.jmx.client
}}}

= Installing the com.googlecode.xm4was.jmx plugin on WAS (Optional) =

VisualVM is typically used to monitor the JVM. However, the platform MXBeans that give access to the relevant data are not registered in !WebSphere's MBean server. Install the [JmxPlugin com.googlecode.xm4was.jmx plugin] to register these MBeans and to enable JVM monitoring in VisualVM.

This should enable CPU, heap, class and thread monitoring as shown in the following screenshot:

http://xm4was.googlecode.com/svn/wiki/visualvm-monitor-was.png

= Installing the VisualVM-MBeans plugin (Optional) =

!WebSphere exposes a rich set of MBeans that allow to monitor and manage various parts of the server. To get access to these MBeans, install the [http://visualvm.java.net/mbeans_tab.html VisualVM-MBeans] plugin. This plugin integrates JConsole's MBeans tab functionality into VisualVM, as shown in the following screenshot:

http://xm4was.googlecode.com/svn/wiki/visualvm-mbeans-was.png

= Creating connections to !WebSphere =

To add a !WebSphere instance to VisualVM, simply create a remote JMX connection that uses a JMX service URL with of one of the forms described in the [JmxClientConnector documentation] of jmx-client-connector:

http://xm4was.googlecode.com/svn/wiki/visualvm-add-jmx-connection.png

Note that when security is enabled, the signer certificate for the !WebSphere instance must be added to the trust store. If RMI is used as protocol, then the connector will propose to add the certificate automatically:

http://xm4was.googlecode.com/svn/wiki/signer-exchange.png

This is not supported with SOAP. In that case, the certificate must be added manually. Alternatively, add an RMI connection first so that the certificate is added automatically (the same certificate is used for RMI and SOAP).

Another important thing to keep in mind when using SOAP is that the proxy settings configured in VisualVM also apply to the SOAP connection to !WebSphere.

= Known issues =

  * CPU sampling is not available with VisualVM 1.3.3, but works with 1.3.2 and 1.3.4.